/**
A conditional structure in Sass always starts with the @if keyword, directlyfollowed
by an expression. This expression can be almost anything: a variable, a function
call, a raw value, an equation
*/
@if $condition {
  // Then do something
} @else {
  // Do something else
}
// ===================================
// only two values are falsy in Sass: false and null
// =====================================
// example: 
// define whether old versions of IE should be supported
$support-ie: true !default;

// If `$support-ie` is truthy, then output the code block
@if $support-ie {
  .clearfix {
    *zoom: 1;
  }
}

.clearfix::after {
  content: "";
  display: table;
  clear: both;
}
// example: 
$number: 42;

.foo {
  @if ($number > 1337) {
    content: "Value is greater than 1377px.";
  } @else if ($number >= 0) {
    content: "Vaue is between 0 and 1337";
  } @else {
    content: "Value is lower than 0";
  }
}

/**
each component of the expression is evaluated on its own, then the results of these
evaluations interact with the and and or keywords. For instance
*/
// example: 
$apple: true;
$cherry: false;

// This statement is evaluated as such:
// @if true and false {...}
// Because `false` isn't a truthy value, the statement doesn't match
@if $apple and $cherry {...}

// This statement is evaluated as such:
// @if true or false {...}
// Because `true` is a truthy value, the statement does match
@if $apple or $cherry {...}

// example
.foo {
  @if $apple and ($cherry or $orange) {
    color: "$apple must be truthy and either $cherry or $orange (or both) must be trutht"
  }

  @if ($apple and $cherry) or $orange {
    color: "Both $apple and $cherry, or $orange (or all of them) must be truthy"
  }
}

// ============================================
/**
The first argument of the if(..) function is the condition, the second one is the
result if the condition is truthy, and the third one is the returned value if the condition is falsy. This function is useful when wanting toshorten an @if/@else statement
to a single line:
*/
$background-color: if($error, red, green);
// ===========================================
// Loops

// Using direct numbers and `through`
@for $i from 1 through 5 {
  // Code to execute 5 times, where `$i` equals:
  // 1
  // 2
  // 3
  // 4
  // 5
 }
 // Using variables and `to`
 $start: 2;
 $end: 4;
 @for $index from $start to $end {
  // Code to execute 2 times, where `$index` equals:
  // 2
 // 3
}
// =========================================
/**
Especially if you have to update the gap between two arrivals,
or the number of items. This is typically where a for-loop can kick in and save the
day
*/
@for $i from 1 through 10 {
  .item:nth-child(#{$i}) {
  animation-delay: ($i - 1) * 0.1s;
  }
 }

 @for $i from 1 through 10 {
  .item:nth-child(#{$i}) {
  border: 1px solid hsl($i * 15, 75%, 75%);
  }
 }

/**
to apply different font
sizes to the six levels of headings we have in HTML. We could loop through a list
of six sizes and apply them respectively to each level of heading:
*/
// example
$sizes: (2em, 1.75em, 1.5em, 1.25em, 1em, 0.75em);
@for $i from 1 through length($sizes) {
 h#{$i} {
 font-size: nth($sizes, $i);
 }
}

// output: 
h1 { font-size: 2em; }
h2 { font-size: 1.75em; }
h3 { font-size: 1.5em; }
h4 { font-size: 1.25em; }
h5 { font-size: 1em; }
h6 { font-size: 0.75em; }

 // ========================================
/**
In the following scenario, the
$sizes list has seven values. We want to loop through the values of the list, but
only up to six values. We therefore need to take the minimum number between six
and the length of the list as the end index of the loop:
*/
// example:
$sizes: (2em, 1.75em, 1.5em, 1.25em, 1em, 0.75em, 0.5em); // 7 value
@for $i from 1 through min(length($sizes), 6) {
 h#{$i} {
 font-size: nth($sizes, $i);
 }
}

// =======================each loop================================
/**
As an example, consider the following code aimed at going through the alphabet,
one letter after the other. We first define a list of 26 letters. Then we loop through
it with an each-loop, accessing the current letter in the loop with $letter:
**/
$alphabet: (a b c d e f g h i j k l m n o p q r s t u v w x y z);
@each $letter in $alphabet {
 // Do something with `$letter`
}
// ==================================
$authors: ('hugo', 'miriam');
@each $author in $authors {
 .section-#{$author} {
 background-image: url('/images/authors/#{$author}.jpg');
 }
}

// ====================================
/**
A simple each-loop is written as follows:
1. the @each directive
2. the name of the item variable
3. the keyword in
4. the collection to iterate over
*/
// example:
$alphabet: (a b c d e f g h i j k l m n o p q r s t u v w x y z);
@each $letter in $alphabet {
 // Do something with `$letter`
}

$authors: ("hugo", 'miriam');
@each $author in $authors {
  .section-#{$author} {
    background-image: url("/images/authors/#{$author}.jpg");
  }
}

// ============================================
// input:
$authors: (
  ('hugo', 'hugo_giraudel.jpg'),
  ('miriam', 'suzanne-miriam.png')
);

@each $author, $filename in $authors {
  .section-#{$author} {
    background-image: url('/images/authors/#{$filename}');
  }
}
// output:
.section-hugo {
  background-image: url("/images/authors/hugo_giraudel.jpg");
 }
 .section-miriam {
  background-image: url("/images/authors/suzanne-miriam.png");
 }

 // ===========================================
 $authors: (
  ('hugo', 'hugo_giraudel.jpg', deeppink),
  ('miriam', 'suzanne-miriam.png', hotpink)
 );
 @each $author, $fielname, $color in $authors {
   .section-#{$author} {
     background-image: url('/images/authors/#{$filename}');
   }
 }